---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "asm"
            qualifier(Type=Name): 
                identifier: "reflect"
                qualifier(Type=Name): 
                    identifier: "meghanada"
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MoreObjects"
                qualifier(Type=Name): 
                    identifier: "base"
                    qualifier(Type=Name): 
                        identifier: "common"
                        qualifier(Type=Name): 
                            identifier: "google"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "InputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ArrayList"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "List"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Map"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Set"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Collectors"
                qualifier(Type=Name): 
                    identifier: "stream"
                    qualifier(Type=Name): 
                        identifier: "util"
                        qualifier(Type=Name): 
                            identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "CandidateUnit"
                qualifier(Type=Name): 
                    identifier: "reflect"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodDescriptor"
                qualifier(Type=Name): 
                    identifier: "reflect"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodParameter"
                qualifier(Type=Name): 
                    identifier: "reflect"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodParameterNames"
                qualifier(Type=Name): 
                    identifier: "names"
                    qualifier(Type=Name): 
                        identifier: "reflect"
                        qualifier(Type=Name): 
                            identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ParameterName"
                qualifier(Type=Name): 
                    identifier: "names"
                    qualifier(Type=Name): 
                        identifier: "reflect"
                        qualifier(Type=Name): 
                            identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Serializer"
                qualifier(Type=Name): 
                    identifier: "store"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ClassNameUtils"
                qualifier(Type=Name): 
                    identifier: "utils"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "StringUtils"
                qualifier(Type=Name): 
                    identifier: "utils"
                    qualifier(Type=Name): 
                        identifier: "meghanada"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "LogManager"
                qualifier(Type=Name): 
                    identifier: "log4j"
                    qualifier(Type=Name): 
                        identifier: "logging"
                        qualifier(Type=Name): 
                            identifier: "apache"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Logger"
                qualifier(Type=Name): 
                    identifier: "log4j"
                    qualifier(Type=Name): 
                        identifier: "logging"
                        qualifier(Type=Name): 
                            identifier: "apache"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "EntryMessage"
                qualifier(Type=Name): 
                    identifier: "message"
                    qualifier(Type=Name): 
                        identifier: "log4j"
                        qualifier(Type=Name): 
                            identifier: "logging"
                            qualifier(Type=Name): 
                                identifier: "apache"
                                qualifier(Type=Name): 
                                    identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AnnotationVisitor"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Attribute"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Label"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodVisitor"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Opcodes"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Type"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "TypePath"
                qualifier(Type=Name): 
                    identifier: "asm"
                    qualifier(Type=Name): 
                        identifier: "objectweb"
                        qualifier(Type=Name): 
                            identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "SignatureReader"
                qualifier(Type=Name): 
                    identifier: "signature"
                    qualifier(Type=Name): 
                        identifier: "asm"
                        qualifier(Type=Name): 
                            identifier: "objectweb"
                            qualifier(Type=Name): 
                                identifier: "org"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "MethodAnalyzeVisitor"
            extendedTypes: 
                - extendedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "MethodVisitor"
            members: 
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=StringLiteralExpr): 
                                value: "<init>"
                            name(Type=SimpleName): 
                                identifier: "CONSTRUCTOR"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=StringLiteralExpr): 
                                value: ", "
                            name(Type=SimpleName): 
                                identifier: "SEP"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=MethodCallExpr): 
                                name(Type=SimpleName): 
                                    identifier: "getLogger"
                                scope(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "LogManager"
                                arguments: 
                                    - argument(Type=ClassExpr): 
                                        type(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "MethodAnalyzeVisitor"
                            name(Type=SimpleName): 
                                identifier: "log"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Logger"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "classAnalyzeVisitor"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassAnalyzeVisitor"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "access"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "exceptions"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "methodSignature"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "interfaceMethod"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "lvtSlotIndex"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "hasVarargs"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "hasDefault"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "parameterNames"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "parameterTypes"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "List"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "TypeInfo"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "typeParameters"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Set"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "formalType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypeInfo"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "returnType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypeInfo"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "typeMap"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Map"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                                arguments: 
                                    - argument(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "ASM5"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "Opcodes"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceEntry"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "classAnalyzeVisitor={} access={} name={} desc={} signature={} exceptions={}"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "classAnalyzeVisitor"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "access"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "desc"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "signature"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "exceptions"
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EntryMessage"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "classAnalyzeVisitor"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "classAnalyzeVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "access"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "access"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "name"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "name"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "exceptions"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "exceptions"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgumentTypes"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Type"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "desc"
                                            name(Type=SimpleName): 
                                                identifier: "args"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Type"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "parameterNames"
                                        scope(Type=ThisExpr): 
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "String"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                                                dimension(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "length"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "args"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=BinaryExpr): 
                                                operator: "GREATER"
                                                left(Type=EnclosedExpr): 
                                                    inner(Type=BinaryExpr): 
                                                        operator: "BINARY_AND"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ACC_STATIC"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Opcodes"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "access"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "isStatic"
                                            type(Type=PrimitiveType): 
                                                type: "BOOLEAN"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "lvtSlotIndex"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "computeLvtSlotIndices"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isStatic"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "args"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "hasVarargs"
                                        scope(Type=ThisExpr): 
                                    value(Type=BinaryExpr): 
                                        operator: "GREATER"
                                        left(Type=EnclosedExpr): 
                                            inner(Type=BinaryExpr): 
                                                operator: "BINARY_AND"
                                                left(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ACC_VARARGS"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Opcodes"
                                                right(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "access"
                                        right(Type=IntegerLiteralExpr): 
                                            value: "0"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "desc"
                                            name(Type=SimpleName): 
                                                identifier: "target"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "signature"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "target"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "signature"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "methodSignature"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "target"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "interfaceMethod"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "isInterface"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getClassIndex"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "classAnalyzeVisitor"
                                                scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                                comment(Type=LineComment): 
                                    content: " log.debug("methodName {} desc {} sig {}", name, desc, signature);"
                    name(Type=SimpleName): 
                        identifier: "MethodAnalyzeVisitor"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "classAnalyzeVisitor"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassAnalyzeVisitor"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "access"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "desc"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "signature"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "exceptions"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "INT"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "paramTypes"
                                            name(Type=SimpleName): 
                                                identifier: "lvtIndex"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ConditionalExpr): 
                                                condition(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "isStatic"
                                                elseExpr(Type=IntegerLiteralExpr): 
                                                    value: "1"
                                                thenExpr(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "nextIndex"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "lvtIndex"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "nextIndex"
                                        - statement(Type=IfStmt): 
                                            condition(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isWideType"
                                                arguments: 
                                                    - argument(Type=ArrayAccessExpr): 
                                                        index(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                        name(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "paramTypes"
                                            elseStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=UnaryExpr): 
                                                            operator: "POSTFIX_INCREMENT"
                                                            expression(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "nextIndex"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "PLUS"
                                                            target(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "nextIndex"
                                                            value(Type=IntegerLiteralExpr): 
                                                                value: "2"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "paramTypes"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "lvtIndex"
                    type(Type=ArrayType): 
                        origin: "TYPE"
                        componentType(Type=PrimitiveType): 
                            type: "INT"
                    name(Type=SimpleName): 
                        identifier: "computeLvtSlotIndices"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "isStatic"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "paramTypes"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Type"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=BinaryExpr): 
                                    operator: "OR"
                                    left(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "aType"
                                        arguments: 
                                            - argument(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "LONG_TYPE"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Type"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "aType"
                                        arguments: 
                                            - argument(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DOUBLE_TYPE"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Type"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "isWideType"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "aType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Type"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "typeMap"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "typeMap"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "MethodAnalyzeVisitor"
                    name(Type=SimpleName): 
                        identifier: "setTypeMap"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "typeMap"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Map"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceEntry"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "name={} methodSignature={}"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                        scope(Type=ThisExpr): 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodSignature"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EntryMessage"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=BinaryExpr): 
                                                operator: "GREATER"
                                                left(Type=EnclosedExpr): 
                                                    inner(Type=BinaryExpr): 
                                                        operator: "BINARY_AND"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ACC_STATIC"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Opcodes"
                                                        right(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "access"
                                                            scope(Type=ThisExpr): 
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "isStatic"
                                            type(Type=PrimitiveType): 
                                                type: "BOOLEAN"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "SignatureReader"
                                                arguments: 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodSignature"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "signatureReader"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SignatureReader"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodSignatureVisitor"
                            - statement(Type=IfStmt): 
                                condition(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "isStatic"
                                elseStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "visitor"
                                                value(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MethodSignatureVisitor"
                                                    arguments: 
                                                        - argument(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                            scope(Type=ThisExpr): 
                                                        - argument(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "classTypeParameters"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "classAnalyzeVisitor"
                                                                scope(Type=ThisExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "visitor"
                                                value(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MethodSignatureVisitor"
                                                    arguments: 
                                                        - argument(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "name"
                                                            scope(Type=ThisExpr): 
                                                        - argument(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ArrayList"
                                                            arguments: 
                                                                - argument(Type=IntegerLiteralExpr): 
                                                                    value: "4"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "typeMap"
                                        scope(Type=ThisExpr): 
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "setTypeMap"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "visitor"
                                                arguments: 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "typeMap"
                                                        scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "accept"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "signatureReader"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "formalType"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getFormalType"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "parameterTypes"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getParameterTypes"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "typeParameters"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getTypeParameters"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "returnType"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getReturnType"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "MethodAnalyzeVisitor"
                    name(Type=SimpleName): 
                        identifier: "parseSignature"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "i={}, s={} b={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "s"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "b"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitParameterAnnotation"
                                            scope(Type=SuperExpr): 
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "s"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "b"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "AnnotationVisitor"
                    name(Type=SimpleName): 
                        identifier: "visitParameterAnnotation"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "i"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "s"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "b"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "attribute={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "attribute"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "visitAttribute"
                                    scope(Type=SuperExpr): 
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "attribute"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visitAttribute"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "attribute"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Attribute"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "s={} i={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "s"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "visitParameter"
                                    scope(Type=SuperExpr): 
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "s"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visitParameter"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "s"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "i"
                            type(Type=PrimitiveType): 
                                type: "INT"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "i={} s={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "s"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "visitLocalVariableAnnotation"
                                                scope(Type=SuperExpr): 
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "typePath"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "labels"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "labels1"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ints"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "s"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "b"
                                            name(Type=SimpleName): 
                                                identifier: "annotationVisitor"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "AnnotationVisitor"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "annotationVisitor"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "AnnotationVisitor"
                    name(Type=SimpleName): 
                        identifier: "visitLocalVariableAnnotation"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "i"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "typePath"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypePath"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "labels"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Label"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "labels1"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Label"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "ints"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "s"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "b"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "desc={} visible={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "desc"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "visitAnnotation"
                                            scope(Type=SuperExpr): 
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "desc"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "visible"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "AnnotationVisitor"
                    name(Type=SimpleName): 
                        identifier: "visitAnnotation"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "desc"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "visible"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "name={} description={} signature={} start={} endPos={} index={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "name"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "description"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "signature"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "start"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "end"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "index"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "lvtSlotIndex"
                                                        scope(Type=ThisExpr): 
                                                right(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "ASSIGN"
                                                            target(Type=ArrayAccessExpr): 
                                                                index(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                                                name(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterNames"
                                                                    scope(Type=ThisExpr): 
                                                            value(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "name"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "lvtSlotIndex"
                                            scope(Type=ThisExpr): 
                                comment(Type=LineComment): 
                                    content: " boolean hasLvtInfo = true;"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visitLocalVariable"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "description"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "signature"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "start"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Label"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "end"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Label"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "index"
                            type(Type=PrimitiveType): 
                                type: "INT"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceEntry"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "typeRef={} typePath={} desc={} visible={}"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "typeRef"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "typePath"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "desc"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "desc"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "visitTypeAnnotation"
                                                scope(Type=SuperExpr): 
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "typeRef"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "typePath"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "desc"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "visible"
                                            name(Type=SimpleName): 
                                                identifier: "annotationVisitor"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "AnnotationVisitor"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "annotationVisitor"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "AnnotationVisitor"
                    name(Type=SimpleName): 
                        identifier: "visitTypeAnnotation"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "typeRef"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "typePath"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypePath"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "desc"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "visible"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceEntry"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "name={}"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EntryMessage"
                            - statement(Type=IfStmt): 
                                condition(Type=FieldAccessExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "interfaceMethod"
                                    scope(Type=ThisExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "hasDefault"
                                                    scope(Type=ThisExpr): 
                                                value(Type=BooleanLiteralExpr): 
                                                    value: "true"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "visitCode"
                                    scope(Type=SuperExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visitCode"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceEntry"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "returnType={} parameterTypes={}"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "returnType"
                                                        scope(Type=ThisExpr): 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parameterTypes"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EntryMessage"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "returnType"
                                        scope(Type=ThisExpr): 
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "returnType"
                                                    scope(Type=ThisExpr): 
                                                value(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "TypeInfo"
                                                    arguments: 
                                                        - argument(Type=StringLiteralExpr): 
                                                            value: "void"
                                                        - argument(Type=StringLiteralExpr): 
                                                            value: "void"
                                            comment(Type=LineComment): 
                                                content: " void"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "parameterTypes"
                                        scope(Type=ThisExpr): 
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parameterTypes"
                                                    scope(Type=ThisExpr): 
                                                value(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ArrayList"
                                                    arguments: 
                                                        - argument(Type=IntegerLiteralExpr): 
                                                            value: "4"
                                            comment(Type=LineComment): 
                                                content: " void"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "AND"
                                    left(Type=EnclosedExpr): 
                                        inner(Type=BinaryExpr): 
                                            operator: "OR"
                                            left(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "NOT_EQUALS"
                                                    left(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "size"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "parameterTypes"
                                                            scope(Type=ThisExpr): 
                                                    right(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "length"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "parameterNames"
                                                            scope(Type=ThisExpr): 
                                            right(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "AND"
                                                    left(Type=BinaryExpr): 
                                                        operator: "GREATER"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parameterNames"
                                                                scope(Type=ThisExpr): 
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                    right(Type=BinaryExpr): 
                                                        operator: "EQUALS"
                                                        left(Type=ArrayAccessExpr): 
                                                            index(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                            name(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parameterNames"
                                                                scope(Type=ThisExpr): 
                                                        right(Type=NullLiteralExpr): 
                                    right(Type=UnaryExpr): 
                                        operator: "LOGICAL_COMPLEMENT"
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "tryGetParameterName"
                                            arguments: 
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "className"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "classAnalyzeVisitor"
                                                        scope(Type=ThisExpr): 
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "name"
                                                    scope(Type=ThisExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "setDefaultParameterNames"
                                                scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "size"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parameterTypes"
                                                    scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "get"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parameterTypes"
                                                                scope(Type=ThisExpr): 
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                                        name(Type=SimpleName): 
                                                            identifier: "ti"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "TypeInfo"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "paramName"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ti"
                                                value(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parameterNames"
                                                        scope(Type=ThisExpr): 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "AND"
                                                left(Type=BinaryExpr): 
                                                    operator: "EQUALS"
                                                    left(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    right(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "size"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                right(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "hasVarargs"
                                                    scope(Type=ThisExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "ASSIGN"
                                                            target(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "variableArguments"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ti"
                                                            value(Type=BooleanLiteralExpr): 
                                                                value: "true"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "size"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "toMemberDescriptor"
                                    scope(Type=ThisExpr): 
                                comment(Type=LineComment): 
                                    content: " log.debug("{} ({})", this.name, this.parameterTypes);"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "entryMessage"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "visitEnd"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "replace"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringUtils"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "className"
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "."
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "/"
                                            name(Type=SimpleName): 
                                                identifier: "path"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                                comment(Type=LineComment): 
                                    content: " log.debug("search {}", name);"
                            - statement(Type=TryStmt): 
                                tryBlock(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "in"
                                                right(Type=NullLiteralExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "false"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readObject"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Serializer"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "in"
                                                                - argument(Type=ClassExpr): 
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "MethodParameterNames"
                                                        name(Type=SimpleName): 
                                                            identifier: "mn"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "MethodParameterNames"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "mn"
                                                right(Type=NullLiteralExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "false"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "get"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "names"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "mn"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "name"
                                                        name(Type=SimpleName): 
                                                            identifier: "pmsList"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "List"
                                                            typeArguments: 
                                                                - typeArgument(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "List"
                                                                    typeArguments: 
                                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "ParameterName"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "pmsList"
                                                right(Type=NullLiteralExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "false"
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "searchParameterNames"
                                                scope(Type=ThisExpr): 
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "pmsList"
                                catchClauses: 
                                    - catchClause(Type=CatchClause): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "debug"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "log"
                                                        arguments: 
                                                            - argument(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getMessage"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "e"
                                        parameter(Type=Parameter): 
                                            isVarArgs: "false"
                                            name(Type=SimpleName): 
                                                identifier: "e"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Exception"
                                resources: 
                                    - resource(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getResourceAsStream"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getClass"
                                                    arguments: 
                                                        - argument(Type=BinaryExpr): 
                                                            operator: "PLUS"
                                                            left(Type=BinaryExpr): 
                                                                operator: "PLUS"
                                                                left(Type=StringLiteralExpr): 
                                                                    value: "/params/"
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "path"
                                                            right(Type=StringLiteralExpr): 
                                                                value: ".param"
                                                name(Type=SimpleName): 
                                                    identifier: "in"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "InputStream"
                            - statement(Type=ReturnStmt): 
                                expression(Type=BooleanLiteralExpr): 
                                    value: "false"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "tryGetParameterName"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "className"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ForeachStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "NOT_EQUALS"
                                                left(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parameterTypes"
                                                        scope(Type=ThisExpr): 
                                                right(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "pms"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ContinueStmt): 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=BooleanLiteralExpr): 
                                                            value: "true"
                                                        name(Type=SimpleName): 
                                                            identifier: "match"
                                                        type(Type=PrimitiveType): 
                                                            type: "BOOLEAN"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=BinaryExpr): 
                                                            operator: "MINUS"
                                                            left(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "size"
                                                                scope(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterTypes"
                                                                    scope(Type=ThisExpr): 
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "1"
                                                        name(Type=SimpleName): 
                                                            identifier: "last"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=ForStmt): 
                                            body(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "get"
                                                                        scope(Type=FieldAccessExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "parameterTypes"
                                                                            scope(Type=ThisExpr): 
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "i"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ti"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "TypeInfo"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "get"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "pms"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "i"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterName"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "ParameterName"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "ti"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "typeInfoType"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "String"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=FieldAccessExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "type"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "parameterName"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterNameType"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "String"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "indexOf"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "typeInfoType"
                                                                        arguments: 
                                                                            - argument(Type=CharLiteralExpr): 
                                                                                value: "<"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "idx1"
                                                                    type(Type=PrimitiveType): 
                                                                        type: "INT"
                                                        comment(Type=LineComment): 
                                                            content: " remove generics"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "GREATER"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "idx1"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "typeInfoType"
                                                                        value(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "substring"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "typeInfoType"
                                                                            arguments: 
                                                                                - argument(Type=IntegerLiteralExpr): 
                                                                                    value: "0"
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "idx1"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "EQUALS"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            right(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "last"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "typeInfoType"
                                                                        value(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "replace"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "StringUtils"
                                                                            arguments: 
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "typeInfoType"
                                                                                - argument(Type=StringLiteralExpr): 
                                                                                    value: "..."
                                                                                - argument(Type=StringLiteralExpr): 
                                                                                    value: ""
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "ASSIGN"
                                                            target(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "typeInfoType"
                                                            value(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "replace"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "StringUtils"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "typeInfoType"
                                                                    - argument(Type=StringLiteralExpr): 
                                                                        value: "%%"
                                                                    - argument(Type=StringLiteralExpr): 
                                                                        value: ""
                                                        comment(Type=LineComment): 
                                                            content: " replace mark"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "indexOf"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "parameterNameType"
                                                                        arguments: 
                                                                            - argument(Type=CharLiteralExpr): 
                                                                                value: "<"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "idx2"
                                                                    type(Type=PrimitiveType): 
                                                                        type: "INT"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "GREATER"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "idx2"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "parameterNameType"
                                                                        value(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "substring"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "parameterNameType"
                                                                            arguments: 
                                                                                - argument(Type=IntegerLiteralExpr): 
                                                                                    value: "0"
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "idx2"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "equals"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "typeInfoType"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterNameType"
                                                        elseStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "match"
                                                                        value(Type=BooleanLiteralExpr): 
                                                                            value: "false"
                                                                    comment(Type=LineComment): 
                                                                        content: " fail"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=ArrayAccessExpr): 
                                                                            index(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "i"
                                                                            name(Type=FieldAccessExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "parameterNames"
                                                                                scope(Type=ThisExpr): 
                                                                        value(Type=FieldAccessExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "name"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "parameterName"
                                                                    comment(Type=LineComment): 
                                                                        content: " log.trace("@ match parameterName idx:{} {}/{}", i, typeInfoType, parameterNameType);"
                                                        comment(Type=LineComment): 
                                                            content: " log.trace("search parameterName idx:{} {}/{}", i, typeInfoType, parameterNameType);"
                                            compare(Type=BinaryExpr): 
                                                operator: "LESS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                                right(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "parameterTypes"
                                                        scope(Type=ThisExpr): 
                                            initialization: 
                                                - initialization(Type=VariableDeclarationExpr): 
                                                    variables: 
                                                        - variable(Type=VariableDeclarator): 
                                                            initializer(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                            type(Type=PrimitiveType): 
                                                                type: "INT"
                                            update: 
                                                - update(Type=UnaryExpr): 
                                                    operator: "POSTFIX_INCREMENT"
                                                    expression(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                        - statement(Type=IfStmt): 
                                            condition(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "match"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "true"
                                                        comment(Type=LineComment): 
                                                            content: " all OK"
                                iterable(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "pmsList"
                                variable(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            name(Type=SimpleName): 
                                                identifier: "pms"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "List"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ParameterName"
                            - statement(Type=ReturnStmt): 
                                expression(Type=BooleanLiteralExpr): 
                                    value: "false"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "searchParameterNames"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "pmsList"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "List"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "List"
                                        typeArguments: 
                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ParameterName"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ArrayList"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "4"
                                            name(Type=SimpleName): 
                                                identifier: "temp"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "List"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "String"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "format"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "String"
                                                            arguments: 
                                                                - argument(Type=StringLiteralExpr): 
                                                                    value: "arg%d"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                                        name(Type=SimpleName): 
                                                            identifier: "tempName"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "String"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "add"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "temp"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "tempName"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "size"
                                        scope(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "parameterTypes"
                                            scope(Type=ThisExpr): 
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "parameterNames"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "toArray"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "temp"
                                        arguments: 
                                            - argument(Type=ArrayCreationExpr): 
                                                elementType(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "String"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "size"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parameterTypes"
                                                                scope(Type=ThisExpr): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "setDefaultParameterNames"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "toModifier"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ASMReflector"
                                                arguments: 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "access"
                                                        scope(Type=ThisExpr): 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "hasDefault"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "modifier"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=IfStmt): 
                                condition(Type=FieldAccessExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "interfaceMethod"
                                    scope(Type=ThisExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "modifier"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "trim"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "replace"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "StringUtils"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "modifier"
                                                            - argument(Type=StringLiteralExpr): 
                                                                value: "abstract"
                                                            - argument(Type=StringLiteralExpr): 
                                                                value: ""
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ConditionalExpr): 
                                                condition(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "equals"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                    arguments: 
                                                        - argument(Type=StringLiteralExpr): 
                                                            value: "<init>"
                                                elseExpr(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "METHOD"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MemberType"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "CandidateUnit"
                                                thenExpr(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "CONSTRUCTOR"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MemberType"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "CandidateUnit"
                                            name(Type=SimpleName): 
                                                identifier: "memberType"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MemberType"
                                                scope(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "CandidateUnit"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ConditionalExpr): 
                                                condition(Type=BinaryExpr): 
                                                    operator: "EQUALS"
                                                    left(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "memberType"
                                                    right(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "CONSTRUCTOR"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "MemberType"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "CandidateUnit"
                                                elseExpr(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "name"
                                                    scope(Type=ThisExpr): 
                                                thenExpr(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "className"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "classAnalyzeVisitor"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "methodName"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceEntry"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "className={} memberType={} methodName={} returnType={}"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "className"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "classAnalyzeVisitor"
                                                            scope(Type=ThisExpr): 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodName"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "memberType"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "returnType"
                                                        scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "message"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EntryMessage"
                            - statement(Type=IfStmt): 
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "startsWith"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "methodName"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "lambda$"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceExit"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "message"
                                            comment(Type=LineComment): 
                                                content: " skip"
                                        - statement(Type=ReturnStmt): 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "AND"
                                    left(Type=BinaryExpr): 
                                        operator: "EQUALS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "memberType"
                                        right(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "CONSTRUCTOR"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "MemberType"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "CandidateUnit"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "methodName"
                                        arguments: 
                                            - argument(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "OBJECT_CLASS"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ClassNameUtils"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "traceExit"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "log"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "message"
                                            comment(Type=LineComment): 
                                                content: " skip"
                                        - statement(Type=ReturnStmt): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ConditionalExpr): 
                                                condition(Type=BinaryExpr): 
                                                    operator: "EQUALS"
                                                    left(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "memberType"
                                                    right(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "CONSTRUCTOR"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "MemberType"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "CandidateUnit"
                                                elseExpr(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getFQCN"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "returnType"
                                                        scope(Type=ThisExpr): 
                                                thenExpr(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodName"
                                            name(Type=SimpleName): 
                                                identifier: "returnFQCN"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "collect"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "map"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "stream"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "parameterTypes"
                                                            scope(Type=ThisExpr): 
                                                    arguments: 
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=ObjectCreationExpr): 
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "MethodParameter"
                                                                    arguments: 
                                                                        - argument(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getFQCN"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "typeInfo"
                                                                        - argument(Type=FieldAccessExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "paramName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "typeInfo"
                                                                        - argument(Type=FieldAccessExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "variableArguments"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "typeInfo"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "typeInfo"
                                                                    type(Type=UnknownType): 
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "toList"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Collectors"
                                            name(Type=SimpleName): 
                                                identifier: "methodParameters"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "List"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MethodParameter"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "MethodDescriptor"
                                                arguments: 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "className"
                                                        scope(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "classAnalyzeVisitor"
                                                            scope(Type=ThisExpr): 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodName"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "modifier"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodParameters"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "exceptions"
                                                        scope(Type=ThisExpr): 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "returnFQCN"
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "hasDefault"
                                                        scope(Type=ThisExpr): 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "memberType"
                                            name(Type=SimpleName): 
                                                identifier: "md"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDescriptor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "hasVarargs"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "md"
                                    value(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "hasVarargs"
                                        scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "setTypeParameters"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "md"
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "typeParameters"
                                            scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "trace"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "formalType={}"
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "formalType"
                                            scope(Type=ThisExpr): 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "formalType"
                                        scope(Type=ThisExpr): 
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "formalType"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "md"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "toString"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "formalType"
                                                        scope(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "add"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "members"
                                        scope(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "classAnalyzeVisitor"
                                            scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "md"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "traceExit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "log"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "message"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "toMemberDescriptor"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "toString"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "add"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "add"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "add"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "add"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "add"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "add"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "add"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "add"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "add"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "add"
                                                                            scope(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "add"
                                                                                scope(Type=MethodCallExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "add"
                                                                                    scope(Type=MethodCallExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "add"
                                                                                        scope(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "toStringHelper"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "MoreObjects"
                                                                                            arguments: 
                                                                                                - argument(Type=ThisExpr): 
                                                                                        arguments: 
                                                                                            - argument(Type=StringLiteralExpr): 
                                                                                                value: "access"
                                                                                            - argument(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "access"
                                                                                    arguments: 
                                                                                        - argument(Type=StringLiteralExpr): 
                                                                                            value: "name"
                                                                                        - argument(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "name"
                                                                                arguments: 
                                                                                    - argument(Type=StringLiteralExpr): 
                                                                                        value: "exceptions"
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "exceptions"
                                                                            arguments: 
                                                                                - argument(Type=StringLiteralExpr): 
                                                                                    value: "methodSignature"
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "methodSignature"
                                                                        arguments: 
                                                                            - argument(Type=StringLiteralExpr): 
                                                                                value: "interfaceMethod"
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "interfaceMethod"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "lvtSlotIndex"
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "lvtSlotIndex"
                                                                arguments: 
                                                                    - argument(Type=StringLiteralExpr): 
                                                                        value: "hasDefault"
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "hasDefault"
                                                            arguments: 
                                                                - argument(Type=StringLiteralExpr): 
                                                                    value: "parameterNames"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "parameterNames"
                                                        arguments: 
                                                            - argument(Type=StringLiteralExpr): 
                                                                value: "parameterTypes"
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "parameterTypes"
                                                    arguments: 
                                                        - argument(Type=StringLiteralExpr): 
                                                            value: "typeParameters"
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "typeParameters"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "formalType"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "formalType"
                                            arguments: 
                                                - argument(Type=StringLiteralExpr): 
                                                    value: "returnType"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "returnType"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "typeMap"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "typeMap"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "toString"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Override"
...

user> 